# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'vehiculos.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5.QtWidgets import QApplication, QMainWindow, QPushButton, QMessageBox
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from base_datos import conn

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(703, 240)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(10, 10, 331, 181))
        self.groupBox.setAutoFillBackground(True)
        self.groupBox.setObjectName("groupBox")
        self.txtMarca = QtWidgets.QLineEdit(self.groupBox)
        self.txtMarca.setGeometry(QtCore.QRect(90, 30, 211, 20))
        self.txtMarca.setObjectName("txtMarca")
        self.txtModelo = QtWidgets.QLineEdit(self.groupBox)
        self.txtModelo.setGeometry(QtCore.QRect(90, 50, 211, 20))
        self.txtModelo.setObjectName("txtModelo")
        self.txtAnio = QtWidgets.QLineEdit(self.groupBox)
        self.txtAnio.setGeometry(QtCore.QRect(90, 70, 71, 20))
        self.txtAnio.setObjectName("txtAnio")
        self.txtDescripcion = QtWidgets.QLineEdit(self.groupBox)
        self.txtDescripcion.setGeometry(QtCore.QRect(90, 90, 211, 20))
        self.txtDescripcion.setObjectName("txtDescripcion")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(20, 30, 47, 13))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(20, 50, 47, 13))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setGeometry(QtCore.QRect(20, 70, 47, 13))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        self.label_4.setGeometry(QtCore.QRect(20, 90, 61, 16))
        self.label_4.setObjectName("label_4")
        self.btnGuardar = QtWidgets.QPushButton(self.groupBox)
        self.btnGuardar.setGeometry(QtCore.QRect(120, 130, 81, 31))
        self.btnGuardar.setObjectName("btnGuardar")
        self.lstVehiculos = QtWidgets.QTableWidget(self.centralwidget)
        self.lstVehiculos.setGeometry(QtCore.QRect(350, 40, 341, 151))
        self.lstVehiculos.setObjectName("lstVehiculos")
        self.lstVehiculos.setColumnCount(0)
        self.lstVehiculos.setRowCount(0)
        self.btnActualizar = QtWidgets.QPushButton(self.centralwidget)
        self.btnActualizar.setGeometry(QtCore.QRect(350, 10, 341, 31))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btnActualizar.setFont(font)
        self.btnActualizar.setDefault(True)
        self.btnActualizar.setFlat(False)
        self.btnActualizar.setObjectName("btnActualizar")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 703, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # guardar
        self.crear_base()
        self.obtener_informacion()
        self.btnGuardar.clicked.connect(self.guardar_informacion)
        self.btnActualizar.clicked.connect(self.obtener_informacion)
        #
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "Datos del Vehiculo"))
        self.label.setText(_translate("MainWindow", "Marca"))
        self.label_2.setText(_translate("MainWindow", "Modelo"))
        self.label_3.setText(_translate("MainWindow", "Año"))
        self.label_4.setText(_translate("MainWindow", "Descripción"))
        self.btnGuardar.setText(_translate("MainWindow", "Guardar"))
        self.btnActualizar.setText(_translate("MainWindow", "Actualizar"))

    def crear_base(self):
        cursor = conn.cursor()
        cadena_sql = 'CREATE TABLE Vehiculo (marca TEXT, modelo TEXT, anio INTEGER, descripcion TEXT)'
        try:
            cursor.execute(cadena_sql)
        except:
            pass
        cursor.close()

    def guardar_informacion(self):

        marca = str(self.txtMarca.text())
        modelo = str(self.txtModelo.text())
        try:
            anio = int(self.txtAnio.text())
        except:
            anio = 0

        descripcion = str(self.txtDescripcion.text())
        #validar que todos los campos se llenen
        if marca == "" or modelo == "" or anio == 0 or descripcion == "":
            # Crear una instancia de QMessageBox
            message_box = QMessageBox(MainWindow)
            # Establecer el título del cuadro de diálogo
            message_box.setWindowTitle('Validacion')
            # Establecer el texto del mensaje
            message_box.setText('Ingrese todos los campos requeridos!')

            # Agregar botones personalizados (opcional)
            message_box.addButton('Aceptar', QMessageBox.YesRole)
            # Mostrar el cuadro de diálogo de mensaje
            result = message_box.exec_()
        else :
            cursor = conn.cursor()
            cadena_sql = """INSERT INTO Vehiculo (marca, modelo, anio, descripcion) VALUES ('%s', '%s', %d, '%s');""" % \
            (marca, modelo, anio, descripcion)
            # ejecutar el SQL
            cursor.execute(cadena_sql)
            # confirmar los cambios
            conn.commit()
            cursor.close()
            #limpiar los campor
            self.txtMarca.setText('')
            self.txtModelo.setText('')
            self.txtAnio.setText('')
            self.txtDescripcion.setText('')
            #recuperar los registros
            self.obtener_informacion()    

    def obtener_informacion(self):
        cursor = conn.cursor()
        cadena_consulta_sql = "SELECT * from Vehiculo"
        cursor.execute(cadena_consulta_sql)
        informacion = cursor.fetchall()
        database_table_column_count = 4
        self.lstVehiculos.setColumnCount(database_table_column_count)
        #cabecera de las columnas
        cabecera = ['Marca', 'Modelo', 'Año','Descripción']
        self.lstVehiculos.setHorizontalHeaderLabels(cabecera)

        numero_filas = len(informacion)
        self.lstVehiculos.setRowCount(numero_filas)
        for j in range(numero_filas):
            valor = informacion[j]
            for i in range(0, len(valor)):
                elemento = valor[i]
                elemento = str(elemento)
                nuevo_registro = QtWidgets.QTableWidgetItem(elemento)
                self.lstVehiculos.setItem(j, i, nuevo_registro)

       
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.setWindowTitle('Registro de Vehiculos')
    MainWindow.show()
    sys.exit(app.exec_())
